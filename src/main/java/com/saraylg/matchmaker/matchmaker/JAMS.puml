@startuml
top to bottom direction
skinparam classAttributeIconSize 0
skinparam linetype ortho

' ==== Controller ====
package "Controller" {
    class JamController {
        - jamService: JamService
        + getAllJams(): List<JamOutputDTO>
        + getJamByState(state: String): List<JamOutputDTO>
        + getJamById(id: String): JamOutputDTO
        + getByTitle(String: title): List<JamOutputDTO>
        + getByCreator(id: String): List<JamOutputDTO>
        + getByUser(id: String): List<JamOutputDTO>
        + createJam(jamInputDTO: JamInputDTO): JamOutputDTO
        + modifyJam(jamModifyDTO: JamModifyDTO): JamOutputDTO
        + addPlayerToJam(jamId: String, jugador: UsuarioInputDTO): ResponseEntity<JamOutputDTO>
        + removePlayerFromJam(jamId: String, steamId: String): ResponseEntity<JamOutputDTO>
        + deleteJam(id: String): String
    }
}

' ==== Service ====
package "Service" {
    class JamService {
        + getAllJams(): List<JamOutputDTO>
        + getJamsByState(state: String): List<JamOutputDTO>
        + getJamById(id: String): JamOutputDTO
        + getJamsByTitle(title: String): List<JamOutputDTO>
        + getJamsByCreator(id: String): List<JamOutputDTO>
        + getJamsByUser(id: String): List<JamOutputDTO>
        + newJam(dto: JamInputDTO): JamOutputDTO
        + modifyJam(dto: JamModifyDTO): JamOutputDTO
        + addPlayerToJam(id: String, jugador: UsuarioInputDTO): JamOutputDTO
        + removePlayerFromJam(id: String, steamId: String): JamOutputDTO
        + deleteJam(id: String): String
    }
}

' ==== DTO ====
package "DTO" {
    class JamInputDTO {
        - title: String
        - description: String
        - game: SteamAppEntity
        - jamDate: String
        - jamTime: String
        - state: JamState
        - createdBy: UsuarioEntity
        - createdAt: String
        - maxPlayers: Integer
        - players: ArrayList<UsuarioEntity>
        - gameMode: GameMode
        - voiceMode: VoiceMode
        - language: Languages
        - duration: String
    }

    class JamModifyDTO {
        - id: String
        - title: String
        - description: String
        - jamDate: String
        - jamTime: String
        - maxPlayers: Integer
        - gameMode: GameMode
        - voiceMode: VoiceMode
        - language: Languages
        - duration: String
    }

    class JamOutputDTO {
        - id: String
        - title: String
        - description: String
        - game: SteamAppEntity
        - jamDate: String
        - jamTime: String
        - state: JamState
        - createdBy: UsuarioEntity
        - createdAt: String
        - maxPlayers: Integer
        - players: ArrayList<UsuarioEntity>
        - gameMode: GameMode
        - voiceMode: VoiceMode
        - language: Languages
        - duration: String
    }

    class TitleInputDTO {
        - title: String
    }

    class UsuarioInputDTO {
        - steamId: String
        - name: String
        - profileUrl: String
        - avatar: String
        - timeCreated: String
    }
}

' ==== Model ====
package "Model" {
    class JamEntity {
        - id: String
        - title: String
        - description: String
        - game: SteamAppEntity
        - jamDate: String
        - jamTime: String
        - state: JamState
        - createdBy: UsuarioEntity
        - createdAt: String
        - maxPlayers: Integer
        - players: ArrayList<UsuarioEntity>
        - gameMode: GameMode
        - voiceMode: VoiceMode
        - language: Languages
        - duration: String
    }

    class UsuarioEntity {
        - steamId: String
        - name: String
        ...
    }

    class SteamAppEntity {
        - appId: Integer
        - name: String
        ...
    }
}

' ==== Repositories ====
package "Repository" {
    class JamRepository {
        + updateJamStateIfNeeded(jam: JamEntity): void
        + newJam(jamInputDTO: JamInputDTO): JamOutputDTO
        + getAllJams(): List<JamOutputDTO>
        + getJamById(id: String): Optional<JamEntity>
        + getJamsByTitle(title: String): Optional<JamEntity>
        + getJamByState(state: String): List<JamEntity>
        + getJamByMode(gameMode: String): List<JamEntity>
        + modifyJam(jamModifyDTO: JamModifyDTO): JamOutputDTO
        + deleteJam(id: String): String
        + addPlayerToJam(jamId: String, jugador: UsuarioInputDTO): JamOutputDTO
        + removePlayerFromJam(jamId: String, steamId: String): JamOutputDTO
        + getJamsByCreator(steamId: String): List<JamOutputDTO>
        + getJamsByUser(steamId: String): List<JamOutputDTO>
    }

    interface JamMongoRepository {
        + findByCreatedBy_SteamId(steamId: String): List<JamEntity>
        + findByPlayers_SteamId(steamId: String): List<JamEntity>
        + findByStateIn(states: List<JamState>): List<JamEntity>
        + findAll(): List<JamEntity>
        + findById(id: String): Optional<JamEntity>
        + save(jam: JamEntity): JamEntity
        + deleteById(id: String): void
    }
}

' ==== Enums ====
package "Enums" {
    enum JamState {
        OPEN
        FULL
        FINISHED
    }

    enum GameMode {
        CASUAL
        COMPETITIVE
        COMPLETIST
    }

    enum VoiceMode {
        TEXT
        HEAR
        TALK
    }

    enum Languages {
        INDEF
        ES
        EN
        FR
        PT
        IT
    }
}

' ==== Relaciones ====
JamController --> JamService

JamController --> JamInputDTO
JamController --> JamModifyDTO
JamController --> JamOutputDTO
JamController --> UsuarioInputDTO
JamController --> TitleInputDTO

JamService --> JamInputDTO
JamService --> JamModifyDTO
JamService --> JamOutputDTO
JamService --> UsuarioInputDTO
JamService --> JamRepository

JamRepository --> JamMongoRepository
JamRepository --> JamEntity
JamRepository --> JamOutputDTO
JamRepository --> UsuarioInputDTO
JamRepository --> JamInputDTO
JamRepository --> JamModifyDTO

JamInputDTO --> UsuarioEntity
JamOutputDTO --> UsuarioEntity

JamEntity --> UsuarioEntity
JamEntity --> JamState
JamEntity --> GameMode
JamEntity --> VoiceMode
JamEntity --> Languages

JamInputDTO --> SteamAppEntity
JamOutputDTO --> SteamAppEntity
JamEntity --> SteamAppEntity

JamMongoRepository --> JamEntity
@enduml
